<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="CVS-API-Performance-Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV HGV Data " enabled="true">
        <stringProp name="filename">../../data/hgvs.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">vinH,vrmH,noOfAxlesH,systemNumberH,odometerReadingH,testEndTimestampH,testStartTimestampH,testStationPNumberH,testerEmailAddressH,vehicleCodeH,vehicleDescH,vehicleTypeH</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV PSV Data" enabled="true">
        <stringProp name="filename">../../data/psvs.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">vin,vrm,noOfAxles,systemNumber,numberOfSeats,odometerReading,testEndTimestamp,testStartTimestamp,testStationPNumber,testerEmailAddress,vehicleCode,vehicleDesc,vehicleSize,vehicleType</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV TRL Data " enabled="true">
        <stringProp name="filename">../../data/trls.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">vinT,noOfAxlesT,systemNumberT,testEndTimestampT,testStartTimestampT,testStationPNumberT,testerEmailAddressT,trailerId,vehicleCodeT,vehicleDescT,vehicleTypeT</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Staff ID" enabled="true">
        <stringProp name="filename">../../data/staff.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">staffId</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="USERNAME" elementType="Argument">
            <stringProp name="Argument.name">USERNAME</stringProp>
            <stringProp name="Argument.value">${__P(username)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">PASSWORD</stringProp>
            <stringProp name="Argument.value">${__P(password)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TOKEN_URL" elementType="Argument">
            <stringProp name="Argument.name">TOKEN_URL</stringProp>
            <stringProp name="Argument.value">${__P(tokenurl)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CLIENT_ID" elementType="Argument">
            <stringProp name="Argument.name">CLIENT_ID</stringProp>
            <stringProp name="Argument.value">${__P(clientid)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="CVS API - VTA Load Conc" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">22</stringProp>
        <stringProp name="RampUp">90</stringProp>
        <stringProp name="Steps">32</stringProp>
        <stringProp name="Hold">60</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">S</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Authenticate" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import com.microsoft.aad.adal4j.AuthenticationContext;
import com.microsoft.aad.adal4j.AuthenticationResult;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

String AUTHORITY = vars.get(&quot;TOKEN_URL&quot;);
String CLIENT_ID = vars.get(&quot;CLIENT_ID&quot;);;

String username = vars.get(&quot;USERNAME&quot;);
String password = vars.get(&quot;PASSWORD&quot;);

AuthenticationContext context;
AuthenticationResult result;
ExecutorService service = null;

try {
  service = Executors.newFixedThreadPool(1);
  context = new AuthenticationContext(AUTHORITY, true, service);

  Future&lt;AuthenticationResult&gt; future = context.acquireToken(
          CLIENT_ID, CLIENT_ID, username, password,
          null);
  result = future.get();

  log.info(&quot;Message:&quot; + result.getAccessToken());
  vars.put(&quot;bearerToken&quot;, result.getAccessToken());

} finally {
  service.shutdown();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Authorized" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${bearerToken}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Start Site Visit" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;activityType&quot;: &quot;visit&quot;,&#xd;
  &quot;endTime&quot;: null,&#xd;
  &quot;startTime&quot;: &quot;${__time(yyyy-MM-dd)}T${__time(HH:mm:ss.SSS)}Z&quot;,&#xd;
  &quot;testerName&quot;: &quot;PSV Performance API Test&quot;,&#xd;
  &quot;testerStaffId&quot;: &quot;${staffId}&quot;,&#xd;
  &quot;testerEmail&quot;: &quot;teststationname@dvsa.gov.uk&quot;,&#xd;
  &quot;testStationEmail&quot;: &quot;teststationname@dvsa.gov.uk&quot;,&#xd;
  &quot;testStationName&quot;: &quot;PSV Performance&quot;,&#xd;
  &quot;testStationPNumber&quot;: &quot;${testStationPNumber}&quot;,&#xd;
  &quot;testStationType&quot;: &quot;atf&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(baseurl)}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(branch)}/activities</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">testId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
            <stringProp name="RandomTimer.range">1000</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <com.blazemeter.jmeter.control.WeightedSwitchController guiclass="com.blazemeter.jmeter.control.WeightedSwitchControllerGui" testclass="com.blazemeter.jmeter.control.WeightedSwitchController" testname="Weighted Across All Vehicle Types" enabled="true">
          <collectionProp name="Weights">
            <collectionProp name="-882442788">
              <stringProp name="2049743997">HGV - Submit A Test</stringProp>
              <stringProp name="1784">80</stringProp>
            </collectionProp>
            <collectionProp name="-1401797338">
              <stringProp name="508969977">PSV - Submit A Test</stringProp>
              <stringProp name="1598">20</stringProp>
            </collectionProp>
            <collectionProp name="-811833460">
              <stringProp name="1774927060">TRL - Submit A Test</stringProp>
              <stringProp name="1567">10</stringProp>
            </collectionProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">80% of HGV are used compared to PSV &amp; Trailer</stringProp>
        </com.blazemeter.jmeter.control.WeightedSwitchController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HGV - Submit A Test" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;testResultId&quot;: &quot;${testId}&quot;,&#xd;
    &quot;testStationName&quot;: &quot;HGV Performance&quot;,&#xd;
    &quot;testStationPNumber&quot;: &quot;${testStationPNumberH}&quot;,&#xd;
    &quot;testStationType&quot;: &quot;gvts&quot;,&#xd;
    &quot;testerName&quot;: &quot;HGV Performance&quot;,&#xd;
    &quot;testerStaffId&quot;: &quot;${staffId}&quot;,&#xd;
    &quot;testerEmailAddress&quot;: &quot;${testerEmailAddressH}&quot;,&#xd;
    &quot;testStartTimestamp&quot;: &quot;${testStartTimestampH}&quot;,&#xd;
    &quot;testEndTimestamp&quot;: &quot;${testEndTimestampH}&quot;,&#xd;
    &quot;testStatus&quot;: &quot;submitted&quot;,&#xd;
    &quot;reasonForCancellation&quot;: null,&#xd;
    &quot;vrm&quot;: &quot;${vrmH}&quot;,&#xd;
    &quot;odometerReading&quot;: ${odometerReadingH},&#xd;
    &quot;odometerReadingUnits&quot;: &quot;kilometres&quot;,&#xd;
    &quot;regnDate&quot;: &quot;1972-10-13&quot;,&#xd;
    &quot;vin&quot;: &quot;${vinH}&quot;,&#xd;
    &quot;systemNumber&quot;: &quot;${systemNumberH}&quot;,&#xd;
    &quot;vehicleClass&quot;: {&#xd;
        &quot;description&quot;: &quot;${vehicleDescH}&quot;,&#xd;
        &quot;code&quot;: &quot;${vehicleCodeH}&quot;&#xd;
    },&#xd;
    &quot;vehicleType&quot;: &quot;${vehicleTypeH}&quot;,&#xd;
    &quot;vehicleConfiguration&quot;: &quot;semi-car transporter&quot;,&#xd;
    &quot;preparerId&quot;: &quot;BL5545&quot;,&#xd;
    &quot;preparerName&quot;: &quot;Durrell Vehicles Limited&quot;,&#xd;
    &quot;euVehicleCategory&quot;: &quot;n2&quot;,&#xd;
    &quot;countryOfRegistration&quot;: &quot;bg&quot;,&#xd;
    &quot;noOfAxles&quot;: ${noOfAxlesH},&#xd;
    &quot;numberOfWheelsDriven&quot;: 4,&#xd;
    &quot;testTypes&quot;: [&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Retest - Paid&quot;,&#xd;
            &quot;testTypeName&quot;: &quot;Paid retest prohibition clearance on first test&quot;,&#xd;
            &quot;testTypeId&quot;: &quot;83&quot;,&#xd;
            &quot;certificateNumber&quot;: null,&#xd;
            &quot;testTypeStartTimestamp&quot;: &quot;2020-02-20T10:33:50.391Z&quot;,&#xd;
            &quot;testTypeEndTimestamp&quot;: &quot;2020-02-20T10:34:04.341Z&quot;,&#xd;
            &quot;modType&quot;: null,&#xd;
            &quot;emissionStandard&quot;: null,&#xd;
            &quot;fuelType&quot;: null,&#xd;
            &quot;smokeTestKLimitApplied&quot;: null,&#xd;
            &quot;particulateTrapFitted&quot;: null,&#xd;
            &quot;particulateTrapSerialNumber&quot;: null,&#xd;
            &quot;modificationTypeUsed&quot;: null,&#xd;
            &quot;testExpiryDate&quot;: null,&#xd;
            &quot;testResult&quot;: &quot;prs&quot;,&#xd;
            &quot;prohibitionIssued&quot;: false,&#xd;
            &quot;reasonForAbandoning&quot;: null,&#xd;
            &quot;additionalCommentsForAbandon&quot;: null,&#xd;
            &quot;additionalNotesRecorded&quot;: null,&#xd;
            &quot;defects&quot;: [&#xd;
                &#xd;
            ],&#xd;
            &quot;customDefects&quot;: null,&#xd;
            &quot;secondaryCertificateNumber&quot;: null&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(baseurl)}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(branch)}/test-results</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-532277980">&quot;Test records created&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">6000</stringProp>
              <stringProp name="RandomTimer.range">3000</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PSV - Submit A Test" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"> {&#xd;
  &quot;testResultId&quot;: &quot;${testId}&quot;,&#xd;
  &quot;testStationName&quot;: &quot;PSV Performance&quot;,&#xd;
  &quot;testStationPNumber&quot;: &quot;${testStationPNumber}&quot;,&#xd;
  &quot;testStationType&quot;: &quot;gvts&quot;,&#xd;
  &quot;testerName&quot;: &quot;PSV Performance&quot;,&#xd;
  &quot;testerStaffId&quot;: &quot;${staffId}&quot;,&#xd;
  &quot;testerEmailAddress&quot;: &quot;${testerEmailAddress}&quot;,&#xd;
  &quot;testStartTimestamp&quot;: &quot;${testStartTimestamp}&quot;,&#xd;
  &quot;testEndTimestamp&quot;: &quot;${testEndTimestamp}&quot;,&#xd;
  &quot;testStatus&quot;: &quot;submitted&quot;,&#xd;
  &quot;reasonForCancellation&quot;: null,&#xd;
  &quot;vrm&quot;: &quot;${vrm}&quot;,&#xd;
  &quot;odometerReading&quot;: ${odometerReading},&#xd;
  &quot;odometerReadingUnits&quot;: &quot;kilometres&quot;,&#xd;
  &quot;vin&quot;: &quot;${vin}&quot;,&#xd;
  &quot;systemNumber&quot;: &quot;${systemNumber}&quot;,&#xd;
  &quot;vehicleClass&quot;: {&#xd;
      &quot;description&quot;: &quot;${vehicleDesc}&quot;,	&#xd;
      &quot;code&quot;: &quot;${vehicleCode}&quot;&#xd;
  },  &#xd;
   &quot;vehicleType&quot;: &quot;${vehicleType}&quot;, &#xd;
   &quot;vehicleConfiguration&quot;: &quot;rigid&quot;,  &#xd;
   &quot;preparerId&quot;: &quot;BL5545&quot;,  &#xd;
   &quot;preparerName&quot;: &quot;PSV API Performance&quot;,  &#xd;
   &quot;numberOfWheelsDriven&quot;: null,&#xd;
   &quot;euVehicleCategory&quot;: &quot;n2&quot;,&#xd;
   &quot;countryOfRegistration&quot;: &quot;bg&quot;,&#xd;
   &quot;noOfAxles&quot;: ${noOfAxles},&#xd;
   &quot;vehicleSize&quot;: &quot;${vehicleSize}&quot;,&#xd;
  &quot;numberOfSeats&quot;: ${numberOfSeats},&#xd;
  &quot;testTypes&quot;: [&#xd;
    {&#xd;
      &quot;name&quot;: &quot;Annual test&quot;,&#xd;
      &quot;testTypeName&quot;: &quot;Annual test&quot;,&#xd;
      &quot;testTypeId&quot;: &quot;1&quot;,&#xd;
      &quot;certificateNumber&quot;: null,&#xd;
      &quot;secondaryCertificateNumber&quot;: null,&#xd;
      &quot;testTypeStartTimestamp&quot;: &quot;2020-01-29T12:21:33.377Z&quot;,&#xd;
      &quot;testTypeEndTimestamp&quot;: &quot;2020-01-29T12:21:45.746Z&quot;,&#xd;
      &quot;numberOfSeatbeltsFitted&quot;: null,&#xd;
      &quot;lastSeatbeltInstallationCheckDate&quot;: null,&#xd;
      &quot;seatbeltInstallationCheckDate&quot;: null,&#xd;
      &quot;modType&quot;: null,&#xd;
      &quot;emissionStandard&quot;: null,&#xd;
      &quot;fuelType&quot;: null,&#xd;
      &quot;smokeTestKLimitApplied&quot;: null,&#xd;
      &quot;particulateTrapFitted&quot;: null,&#xd;
      &quot;particulateTrapSerialNumber&quot;: null,&#xd;
      &quot;modificationTypeUsed&quot;: null,&#xd;
      &quot;testResult&quot;: &quot;pass&quot;,&#xd;
      &quot;prohibitionIssued&quot;: false,&#xd;
      &quot;reasonForAbandoning&quot;: null,&#xd;
      &quot;additionalCommentsForAbandon&quot;: null,&#xd;
      &quot;additionalNotesRecorded&quot;: null,&#xd;
      &quot;defects&quot;: [&#xd;
      ],&#xd;
            &quot;customDefects&quot;:null&#xd;
        }&#xd;
    ],&#xd;
    &quot;regnDate&quot;: &quot;2019-03-16&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(baseurl)}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(branch)}/test-results</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-532277980">&quot;Test records created&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">6000</stringProp>
              <stringProp name="RandomTimer.range">3000</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TRL - Submit A Test" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;testResultId&quot;: &quot;${testId}&quot;,&#xd;
  &quot;testStationName&quot;: &quot;TRLPerformance&quot;,&#xd;
  &quot;testStationPNumber&quot;: &quot;${testStationPNumberT}&quot;,&#xd;
  &quot;testStationType&quot;: &quot;gvts&quot;,&#xd;
  &quot;testerName&quot;: &quot;TRL Performance&quot;,&#xd;
  &quot;testerStaffId&quot;: &quot;${staffId}&quot;,&#xd;
  &quot;testerEmailAddress&quot;: &quot;${testerEmailAddressT}&quot;,&#xd;
  &quot;testStartTimestamp&quot;: &quot;${testStartTimestampT}&quot;,&#xd;
  &quot;testEndTimestamp&quot;: &quot;${testEndTimestampT}&quot;,&#xd;
  &quot;testStatus&quot;: &quot;submitted&quot;,&#xd;
  &quot;reasonForCancellation&quot;: null,&#xd;
  &quot;trailerId&quot;: &quot;${trailerId}&quot;,&#xd;
  &quot;firstUseDate&quot;: &quot;2019-06-24&quot;,&#xd;
  &quot;vin&quot;: &quot;${vinT}&quot;,&#xd;
  &quot;systemNumber&quot;: &quot;${systemNumberT}&quot;,&#xd;
  &quot;vehicleClass&quot;: {&#xd;
    &quot;description&quot;: &quot;${vehicleDescT}&quot;,&#xd;
    &quot;code&quot;: &quot;${vehicleCodeT}&quot;&#xd;
  },&#xd;
  &quot;vehicleType&quot;: &quot;${vehicleTypeT}&quot;,&#xd;
  &quot;vehicleConfiguration&quot;: &quot;semi-trailer&quot;,&#xd;
  &quot;preparerId&quot;: &quot;BL5545&quot;,&#xd;
  &quot;preparerName&quot;: &quot;Durrell Vehicles Limited&quot;,&#xd;
  &quot;euVehicleCategory&quot;: &quot;o2&quot;,&#xd;
  &quot;numberOfWheelsDriven&quot;: 4,&#xd;
  &quot;countryOfRegistration&quot;: &quot;bg&quot;,&#xd;
  &quot;noOfAxles&quot;: 1,&#xd;
  &quot;testTypes&quot;: [&#xd;
    {&#xd;
      &quot;name&quot;: &quot;First test&quot;,&#xd;
      &quot;testTypeName&quot;: &quot;First test&quot;,&#xd;
      &quot;testTypeId&quot;: &quot;41&quot;,&#xd;
      &quot;certificateNumber&quot;: null,&#xd;
      &quot;testTypeStartTimestamp&quot;: &quot;2020-02-20T15:32:30.007Z&quot;,&#xd;
      &quot;testTypeEndTimestamp&quot;: &quot;2020-02-20T15:32:53.151Z&quot;,&#xd;
      &quot;testExpiryDate&quot;: null,&#xd;
      &quot;testResult&quot;: &quot;pass&quot;,&#xd;
      &quot;prohibitionIssued&quot;: false,&#xd;
      &quot;reasonForAbandoning&quot;: null,&#xd;
      &quot;additionalCommentsForAbandon&quot;: null,&#xd;
      &quot;additionalNotesRecorded&quot;: null,&#xd;
      &quot;defects&quot;: [&#xd;
      &#xd;
      ],&#xd;
      &quot;customDefects&quot;: null,&#xd;
      &quot;secondaryCertificateNumber&quot;: &quot;21323&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(baseurl)}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(branch)}/test-results</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-532277980">&quot;Test records created&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">6000</stringProp>
              <stringProp name="RandomTimer.range">3000</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="End Site Visit" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(baseurl)}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(branch)}/activities/${testId}/end</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
            <stringProp name="RandomTimer.range">1000</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
